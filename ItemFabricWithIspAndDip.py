'''
ISP (Interface Segregation Principle) и DIP (Dependency Inversion Principle) — это два из пяти 
принципов SOLID, которые служат основой для создания чистого и поддерживаемого 
объектно-ориентированного кода.

ISP (Принцип разделения интерфейса): Клиенты не должны зависеть от интерфейсов, которые они 
не используют. Это означает, что большие интерфейсы следует разбивать на более мелкие и 
специфические, чтобы клиенты использовали только те интерфейсы, которые им нужны.

DIP (Принцип инверсии зависимостей): Высокоуровневые модули не должны зависеть от низкоуровневых 
модулей. Оба типа модулей должны зависеть от абстракций.

Как я применила эти принципы к коду про сундуки:

Применение ISP:

У меня есть отдельные интерфейсы для ItemFabric и IGameItem, что означает, что логика создания и 
использования предметов не перемешана.
Однако, если бы были дополнительные методы в одном из интерфейсов, которые не все классы реализуют, 
это бы нарушило бы ISP. В этом случае следовало бы разделить интерфейс на более мелкие.

Применение DIP:

ItemFabric зависит от абстракции IGameItem, а не от конкретных реализаций, что соответствует 
принципу инверсии зависимостей.
Однако можно улучшить зависимость между ItemFabric и конкретными игровыми предметами, передавая 
их через конструктор или другие методы, а не через прямое создание внутри фабрики.

'''




class ItemFabric(ABC):

    def __init__(self, item_creator):
        self._item_creator = item_creator

    def create_item(self):
        return self._item_creator()

    def open_reward(self):
        print('Create new bag or chest')
        self.game_item = self.create_item()
        self.game_item.open()
